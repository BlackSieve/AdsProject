python manage.py shell
from news.models import *

1.Создание двух пользователей с помощью метода User.objects.create_user:

u1 = User.objects.create_user(username='Данилл')
u2 = User.objects.create_user(username="Денис")

2.Создание авторов

a1 = Author.objects.create(user=u1)
a2 = Author.objects.create(user=u2)

3. Создание постов

p1 = Post.objects.create(title="Победа в игре", text="в этом турнире команда синих победила с отрывом", news="NW", author=a1)
p2 = Post.objects.create(title="Победа синих", text="с огромным отрывом побеждают синии", news="SE", author=a2)
p3 = Post.objects.create(title="Проигрыш красных", text="в этот раз команде красным не удалось выйграть в турнире ", news="SE", author=a1)

4.Создание категорий

g1 = Category.objects.create(name="Игры")
g2 = Category.objects.create(name="Турниры")
g3 = Category.objects.create(name="Выигрыши")
g4 = Category.objects.create(name="Важное")

5.Создание комментариев под новостями

c1 = Comment.objects.create(text="рад за них",post = p2, user=a2.user)
c2 = Comment.objects.create(text="это было круто",post = p1, user=a1.user)
c3 = Comment.objects.create(text="это плохо",post = p3, user=a2.user)
c4 = Comment.objects.create(text="жалко красных",post = p1, user=a1.user)

6.Добавление категорий к постам
PostCategory.objects.create(post = p1, category = g1)
p2 = Post.objects.get(pk=2)
p2.category.add(g1,g4)

7. Вывод лучшего поста
best_post = Post.objects.order_by('-rating').first()
best_post.author.user.username
best_post.rating
best_post.title
best_post.preview()

8.Вывод лучшего комментария
comments_best_post = Comment.objects.filter(post = best_post)
comments_best_post
comments_best_post.values('data', 'user', 'rating','text')

9.Вывод лучшего автора
authours = Author.objects.all()
authours = Author.objects.order_by('-rating')
best_authour = authours.first()
best_authour.user.username

10.Обновление рейтинга
a1.rating
a1.update_rating()
)


'DIRS': [os.path.join(BASE_DIR, 'templates')],
BASE_DIR/'templates'

day_of_week="thu", hour="12", minute="51", timezone='UTC'


celery -A NewsPaper worker -l INFO --pool=solo
celery -A NewsPaper beat -l INFO

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

hour=8,minute=0,day_of_week='monday'











logger = logging.getLogger(__name__)


# наша задача по выводу текста на экран
def my_job():
    today = timezone.now()
    last_week = today - datetime.timedelta(days=7)
    posts = Post.objects.filter(date__gte=last_week)
    categories = set(posts.values_list('category__name', flat=True))
    subscribers = set(Category.objects.filter(name__in=categories).values_list('subscribers__email', flat=True))

    html_content = render_to_string(
        'news/daily_post.html',
        {
            'link': settings.SITE_URL,
            'posts': posts,
        }
    )
    msg = EmailMultiAlternatives(
        subject='Публикации за неделю',
        body='',
        from_email=settings.DEFAULT_FROM_EMAIL,
        to=subscribers,
    )
    msg.attach_alternative(html_content, 'text/html')
    msg.send(fail_silently=False)

# функция, которая будет удалять неактуальные задачи
def delete_old_job_executions(max_age=604_800):
    """This job deletes all apscheduler job executions older than max_age from the database."""
    DjangoJobExecution.objects.delete_old_job_executions(max_age)


class Command(BaseCommand):
    help = "Runs apscheduler."

    def handle(self, *args, **options):
        scheduler = BlockingScheduler(timezone=settings.TIME_ZONE)
        scheduler.add_jobstore(DjangoJobStore(), "default")

        # добавляем работу нашему задачнику
        scheduler.add_job(
            my_job,
            trigger=CronTrigger(day_of_week="thu", hour="12", minute="51", timezone='UTC'),
            # То же, что и интервал, но задача тригера таким образом более понятна django
            id="my_job",  # уникальный айди
            max_instances=1,
            replace_existing=True,
        )
        logger.info("Added job 'my_job'.")

        scheduler.add_job(
            delete_old_job_executions,
            trigger=CronTrigger(
                day_of_week="mon", hour="00", minute="00"


            ),
            # Каждую неделю будут удаляться старые задачи, которые либо не удалось выполнить, либо уже выполнять не надо.
            id="delete_old_job_executions",
            max_instances=1,
            replace_existing=True,
        )
        logger.info(
            "Added weekly job: 'delete_old_job_executions'."
        )

        try:
            logger.info("Starting scheduler...")
            scheduler.start()
        except KeyboardInterrupt:
            logger.info("Stopping scheduler...")
            scheduler.shutdown()
            logger.info("Scheduler shut down successfully!")
        try:
            logger.info("Starting scheduler...")
            scheduler.start()
        except KeyboardInterrupt:
            logger.info("Stopping scheduler...")
            scheduler.shutdown()
            logger.info("Scheduler shut down successfully!")